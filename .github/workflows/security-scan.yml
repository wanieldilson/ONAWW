name: Security Scanning

on:
  # Run security scans on schedule (daily at 2 AM UTC)
  schedule:
    - cron: '0 2 * * *'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      scan_level:
        description: 'Security scan level'
        required: true
        default: 'standard'
        type: choice
        options:
        - standard
        - comprehensive

  # Also run on security-related file changes
  push:
    paths:
      - '**/package*.json'
      - '**/Dockerfile'
      - '.snyk'
      - 'docker-compose*.yml'
      - '.github/workflows/security-scan.yml'

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '18'
        

    - name: Install dependencies
      run: |
        npm install
        cd backend && npm install
        cd ../frontend && npm install

    - name: Audit backend dependencies
      run: |
        cd backend
        echo "🔍 Scanning backend dependencies..."
        npm audit --json > ../backend-audit.json || true
        npm audit --audit-level moderate

    - name: Audit frontend dependencies
      run: |
        cd frontend
        echo "🔍 Scanning frontend dependencies..."
        npm audit --json > ../frontend-audit.json || true
        npm audit --audit-level moderate

    - name: Upload audit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-audit-results
        path: |
          backend-audit.json
          frontend-audit.json

  snyk-scan:
    name: Snyk Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.scan_level == 'comprehensive' || vars.SNYK_TOKEN != ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm install
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: Run Snyk to check for vulnerabilities (Backend)
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --file=backend/package.json --severity-threshold=medium
        command: test
      continue-on-error: true

    - name: Run Snyk to check for vulnerabilities (Frontend)
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --file=frontend/package.json --severity-threshold=medium
        command: test
      continue-on-error: true

    - name: Run Snyk to check for license issues
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium
        command: test
      continue-on-error: true

  trivy-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Run Trivy vulnerability scanner (Filesystem)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'
        severity: 'MEDIUM,HIGH,CRITICAL'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-fs-results.sarif'

    - name: Run Trivy configuration scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-config-results.sarif'
        severity: 'MEDIUM,HIGH,CRITICAL'

    - name: Upload Trivy config scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-config-results.sarif'

  docker-security-scan:
    name: Docker Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: onaww:security-scan
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner on Docker image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'onaww:security-scan'
        format: 'sarif'
        output: 'docker-security-results.sarif'
        severity: 'MEDIUM,HIGH,CRITICAL'

    - name: Upload Docker security scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'docker-security-results.sarif'

    - name: Run Docker Bench Security
      run: |
        docker run --rm --net host --pid host --userns host --cap-add audit_control \
          -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
          -v /etc:/etc:ro \
          -v /usr/bin/containerd:/usr/bin/containerd:ro \
          -v /usr/bin/runc:/usr/bin/runc:ro \
          -v /usr/lib/systemd:/usr/lib/systemd:ro \
          -v /var/lib:/var/lib:ro \
          -v /var/run/docker.sock:/var/run/docker.sock:ro \
          --label docker_bench_security \
          docker/docker-bench-security || echo "Docker Bench completed with warnings"

  comprehensive-scan:
    name: Comprehensive Security Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_level == 'comprehensive' || github.event_name == 'schedule'
    needs: [dependency-scan, trivy-scan, docker-security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm install
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: Run ESLint security rules
      run: |
        cd backend && npx eslint . --ext .ts,.js --format json > ../backend-eslint-security.json || true
        cd ../frontend && npx eslint . --ext .ts,.tsx,.js,.jsx --format json > ../frontend-eslint-security.json || true

    - name: Run Semgrep security scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
        generateSarif: "1"

    - name: Upload Semgrep results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: semgrep.sarif

    - name: Upload comprehensive scan artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: comprehensive-security-results
        path: |
          backend-eslint-security.json
          frontend-eslint-security.json
          semgrep.sarif

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, trivy-scan, docker-security-scan]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate security summary
      run: |
        echo "# Security Scan Summary - $(date)" > security-summary.md
        echo "" >> security-summary.md
        echo "## Scan Results" >> security-summary.md
        echo "- ✅ Dependency scan completed" >> security-summary.md
        echo "- ✅ Trivy filesystem scan completed" >> security-summary.md
        echo "- ✅ Docker security scan completed" >> security-summary.md
        
        if [ -f "dependency-audit-results/backend-audit.json" ]; then
          echo "- 📊 Backend dependencies scanned" >> security-summary.md
        fi
        
        if [ -f "dependency-audit-results/frontend-audit.json" ]; then
          echo "- 📊 Frontend dependencies scanned" >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "## Next Steps" >> security-summary.md
        echo "1. Review security findings in the GitHub Security tab" >> security-summary.md
        echo "2. Update dependencies with known vulnerabilities" >> security-summary.md
        echo "3. Address any high or critical severity issues" >> security-summary.md

    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md
