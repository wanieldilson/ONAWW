name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]

# Cancel in-progress runs for the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  # Quick validation checks
  validate:
    name: Quick Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        npm install
        cd backend && npm install
        cd ../frontend && npm install

    - name: Lint backend
      run: |
        cd backend
        if [ -f "package.json" ] && npm run lint --if-present; then
          echo "‚úÖ Backend linting passed"
        else
          echo "‚ö†Ô∏è No linting script found for backend"
        fi

    - name: Lint frontend
      run: |
        cd frontend
        if [ -f "package.json" ] && npm run lint --if-present; then
          echo "‚úÖ Frontend linting passed"
        else
          echo "‚ö†Ô∏è No linting script found for frontend"
        fi

    - name: Type check backend
      run: |
        cd backend
        if [ -f "tsconfig.json" ]; then
          npx tsc --noEmit
          echo "‚úÖ Backend type checking passed"
        fi

    - name: Type check frontend
      run: |
        cd frontend
        if [ -f "tsconfig.json" ]; then
          npx tsc --noEmit
          echo "‚úÖ Frontend type checking passed"
        fi

  # Run tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    strategy:
      matrix:
        node-version: [18, 20]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v5
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies
      run: |
        npm install
        cd backend && npm install
        cd ../frontend && npm install

    - name: Run backend tests
      run: |
        cd backend
        npm test -- --coverage --passWithNoTests
        echo "‚úÖ Backend tests completed"

    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --passWithNoTests --watchAll=false
        echo "‚úÖ Frontend tests completed"

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: matrix.node-version == '18'
      with:
        files: ./backend/coverage/lcov.info,./frontend/coverage/lcov.info
        flags: backend,frontend
        name: codecov-umbrella
        fail_ci_if_error: false

  # Build verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        npm install
        cd backend && npm install
        cd ../frontend && npm install

    - name: Build backend
      run: |
        cd backend
        npm run build
        echo "‚úÖ Backend build successful"

    - name: Build frontend
      run: |
        cd frontend
        npm run build
        echo "‚úÖ Frontend build successful"

    - name: Verify build artifacts
      run: |
        if [ -d "backend/dist" ]; then
          echo "‚úÖ Backend dist directory created"
          ls -la backend/dist/
        fi
        
        if [ -d "frontend/dist" ]; then
          echo "‚úÖ Frontend dist directory created"
          ls -la frontend/dist/
        fi

  # Docker build test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: onaww:pr-${{ github.event.pull_request.number }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Test Docker image
      run: |
        # Start the container in detached mode
        docker run -d --name test-container -p 3001:3001 onaww:pr-${{ github.event.pull_request.number }}
        
        # Wait for the container to start
        sleep 10
        
        # Test if the service is responding (if health check is available)
        if docker exec test-container node -e "require('http').get('http://localhost:3001/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))" 2>/dev/null; then
          echo "‚úÖ Docker container health check passed"
        else
          echo "‚ö†Ô∏è Health check not available or failed, but container is running"
        fi
        
        # Check if container is still running
        if docker ps | grep test-container; then
          echo "‚úÖ Docker container is running successfully"
        else
          echo "‚ùå Docker container failed to stay running"
          docker logs test-container
          exit 1
        fi
        
        # Cleanup
        docker stop test-container
        docker rm test-container

  # Security check for PR
  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    permissions:
      security-events: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        npm install
        cd backend && npm install
        cd ../frontend && npm install

    - name: Run security audit
      run: |
        echo "üîç Running security audit..."
        cd backend && npm audit --audit-level high
        cd ../frontend && npm audit --audit-level high
        echo "‚úÖ Security audit completed"
      continue-on-error: true

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-pr-results.sarif'
        severity: 'HIGH,CRITICAL'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-pr-results.sarif'

  # PR summary
  summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [validate, test, build, docker-build, security-check]
    if: always() && github.event.pull_request.draft == false
    
    steps:
    - name: Generate PR summary
      run: |
        echo "## üê∫ Pull Request Validation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Validation Results" >> $GITHUB_STEP_SUMMARY
        echo "- Validation: ${{ needs.validate.result == 'success' && '‚úÖ Passed' || needs.validate.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Tests: ${{ needs.test.result == 'success' && '‚úÖ Passed' || needs.test.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Build: ${{ needs.build.result == 'success' && '‚úÖ Passed' || needs.build.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Docker: ${{ needs.docker-build.result == 'success' && '‚úÖ Passed' || needs.docker-build.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Security: ${{ needs.security-check.result == 'success' && '‚úÖ Passed' || needs.security-check.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ö†Ô∏è Issues Found' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Review any failed checks above" >> $GITHUB_STEP_SUMMARY
        echo "2. Address security findings in the Security tab" >> $GITHUB_STEP_SUMMARY
        echo "3. Ensure all tests pass before merging" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "ü§ñ This summary was generated automatically" >> $GITHUB_STEP_SUMMARY

    - name: Check if all jobs passed
      run: |
        if [[ "${{ needs.validate.result }}" == "success" && 
              "${{ needs.test.result }}" == "success" && 
              "${{ needs.build.result }}" == "success" && 
              "${{ needs.docker-build.result }}" == "success" ]]; then
          echo "üéâ All validation checks passed! PR is ready for review."
        else
          echo "‚ö†Ô∏è Some validation checks failed. Please review and fix issues before merging."
        fi
